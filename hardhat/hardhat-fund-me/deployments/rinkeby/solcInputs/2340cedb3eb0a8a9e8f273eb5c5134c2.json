{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"./PriceConvertor.sol\"; \n\nerror FundMe__NotOwner();\n\n/** @title A contract for crowd funding\n\t*\t@author Petar Dzhunov\n \t*\t@notice This contract is to demo a sample funding contract\n \t*\t@dev This implements price feeds as our library\n */\ncontract FundMe {\n\n    using PriceConvertor for uint256;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address[] private s_funders;\n    mapping (address => uint256) private s_addressToAmountFunded;\n    address private immutable i_owner;\n    // we pass the address price feed depending on the chain we are on\n\n\t\tAggregatorV3Interface private s_priceFeed;\n\t\t     \n    modifier onlyOwner{\n        if(msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n\t\t\t\ts_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n\t/**\n\t\t* @notice This function funds this contract\n\t\t* @dev This implements price feeds as our library\n\t */\n    function fund() public payable {\n        require(msg.value.getConversionRate(s_priceFeed) >=  MINIMUM_USD,\"Didn't send enough\");   //1e18 = 1*10**18 == 1ETH (in wei)\n        s_funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for(uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\n            address funder = s_funders[funderIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n\n        s_funders = new address[](0); // reseting the array\n       (bool callSuccess,) =  i_owner.call{value: address(this).balance}(\"\");\n       require(callSuccess, \"Call failed\");\n    }\n\n\t\tfunction cheaperWithdraw() public onlyOwner {\n\t\t\taddress[] memory funders = s_funders;\n\t\t\t// only mappings can't be in memory;\n\t\t\tfor(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++) {\n\t\t\t\taddress funder = funders[funderIndex];\n\t\t\t\ts_addressToAmountFunded[funder] = 0;\n\t\t\t}\n\t\t\ts_funders = new address[](0);\n       (bool callSuccess,) =  i_owner.call{value: address(this).balance}(\"\");\n       require(callSuccess, \"Call failed\");\n\t\t}\n\n\t\tfunction getOwner() public view returns(address) {\n\t\t\treturn i_owner;\n\t\t}\n\n\t\tfunction getFunder(uint256 index) public view returns(address) {\n\t\t\treturn s_funders[index];\n\t\t}\n\n\t\tfunction getAddressToAmountFunded(address funder) public view returns(uint256) {\n\t\t\treturn s_addressToAmountFunded[funder];\n\t\t}\n\n\t\tfunction getPriceFeed() public view returns (AggregatorV3Interface) {\n\t\t\treturn s_priceFeed;\n\t\t}\n\t\t}"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n\nfunction getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (,int price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10); // 1**10 == 10000000000\n    }\n\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal view returns(uint256) { \n        uint256 ethPrice = getPrice(priceFeed);\n        uint ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}