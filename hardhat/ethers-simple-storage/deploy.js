//Ethers.js allows us to interract with blockchains
const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf-8");
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

    // const wallet = new ethers.Wallet.fromEncryptedJsonSync(
    //   encryptedJson,
    //   process.env.PRIVATE_KEY_PASSWORD,
    // );
    // wallet = await wallet.connect(provider);

    const abi = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.abi",
        "utf-8"
    );
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf-8"
    );

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying, please wait...");
    try {
        const contract = await contractFactory.deploy();
        // we only get transaction receipt when we only wait for a block confirmation
        const transactionReceipt = await contract.deployTransaction.wait(1);
        // console.log('Here is the deployment transaction-initial transaction data');
        // console.log(contract.deployTransaction);
        // console.log('Here is the transaction receipt-after waiting a block');
        // console.log(transactionReceipt);
        // console.log('Deploying with only transaction data');
        // const nonce = await wallet.getTransactionCount();
        // const tx = {
        //   nonce: nonce,
        //   gasPrice: 20000000000,
        //   gasLimit: 100000,
        //   to: null,
        //   value: 0,
        //   data: '0x60806040526040518060400160405280600281526020016040518060400160405280600581526020017f506573686f000000000000000000000000000000000000000000000000000000815250815250600260008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061012f565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b6000600282049050600182168061014757607f821691505b6020821081141561015b5761015a610161565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6108748061019f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636f760f411161005b5780636f760f41146100da57806377ec2b55146100f65780638bab8dd5146101155780639e7a13ad146101455761007d565b80632e64cec114610082578063471f7cdf146100a05780636057361d146100be575b600080fd5b61008a610176565b604051610097919061062d565b60405180910390f35b6100a861017f565b6040516100b5919061062d565b60405180910390f35b6100d860048036038101906100d39190610570565b610185565b005b6100f460048036038101906100ef9190610514565b61018f565b005b6100fe61021f565b60405161010c929190610648565b60405180910390f35b61012f600480360381019061012a91906104cb565b6102b9565b60405161013c919061062d565b60405180910390f35b61015f600480360381019061015a9190610570565b6102e7565b60405161016d929190610648565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b600460405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101f59291906103a3565b505050806001836040516102099190610616565b9081526020016040518091039020819055505050565b600280600001549080600101805461023690610741565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610741565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905082565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b600481815481106102f757600080fd5b906000526020600020906002020160009150905080600001549080600101805461032090610741565b80601f016020809104026020016040519081016040528092919081815260200182805461034c90610741565b80156103995780601f1061036e57610100808354040283529160200191610399565b820191906000526020600020905b81548152906001019060200180831161037c57829003601f168201915b5050505050905082565b8280546103af90610741565b90600052602060002090601f0160209004810192826103d15760008555610418565b82601f106103ea57805160ff1916838001178555610418565b82800160010185558215610418579182015b828111156104175782518255916020019190600101906103fc565b5b5090506104259190610429565b5090565b5b8082111561044257600081600090555060010161042a565b5090565b60006104596104548461069d565b610678565b90508281526020810184848401111561047557610474610807565b5b6104808482856106ff565b509392505050565b600082601f83011261049d5761049c610802565b5b81356104ad848260208601610446565b91505092915050565b6000813590506104c581610827565b92915050565b6000602082840312156104e1576104e0610811565b5b600082013567ffffffffffffffff8111156104ff576104fe61080c565b5b61050b84828501610488565b91505092915050565b6000806040838503121561052b5761052a610811565b5b600083013567ffffffffffffffff8111156105495761054861080c565b5b61055585828601610488565b9250506020610566858286016104b6565b9150509250929050565b60006020828403121561058657610585610811565b5b6000610594848285016104b6565b91505092915050565b60006105a8826106ce565b6105b281856106d9565b93506105c281856020860161070e565b6105cb81610816565b840191505092915050565b60006105e1826106ce565b6105eb81856106ea565b93506105fb81856020860161070e565b80840191505092915050565b610610816106f5565b82525050565b600061062282846105d6565b915081905092915050565b60006020820190506106426000830184610607565b92915050565b600060408201905061065d6000830185610607565b818103602083015261066f818461059d565b90509392505050565b6000610682610693565b905061068e8282610773565b919050565b6000604051905090565b600067ffffffffffffffff8211156106b8576106b76107d3565b5b6106c182610816565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561072c578082015181840152602081019050610711565b8381111561073b576000848401525b50505050565b6000600282049050600182168061075957607f821691505b6020821081141561076d5761076c6107a4565b5b50919050565b61077c82610816565b810181811067ffffffffffffffff8211171561079b5761079a6107d3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610830816106f5565b811461083b57600080fd5b5056fea2646970667358221220122287edb4305273db5e6d89e1f65c54dae785863ad0e96151969a472790b1ed64736f6c63430008070033',
        //   chainId: 1337,
        // };
        // const sendTxResponse = await wallet.sendTransaction(tx);
        // await sendTxResponse.wait(1);

        //since its a view function and called outside of a contract function call
        // it does not cost any gas
        const currentFavouriteNumber = await contract.retrieve();
        console.log(
            `Current Favorite Number: ${currentFavouriteNumber.toString()}`
        );
        const transactionResp = await contract.store(5);
        const transactionRecieptt = await transactionResp.wait(1);
        const updatedFavoriteNumber = await contract.retrieve();
        console.log(`Updated Favorite Number: ${updatedFavoriteNumber}`);
    } catch (err) {
        console.log("Something went wrong...", err);
    }
}

main();
